from sage.all import *

# Given values
N = 18693764369712092061910805595050739494600252339504032365764557849501848052929555061479870082408622501909905676444412379307928910383932025193252041386466058524209769459378447980018619077136635699525753960055745765784232800397005598103485164178935836440701723214470518409258786118587320166938105898224207386465247342279508465811908946374011588573514633097620579549844676379912311812832433003834885912009307029861366971487603037312040877006699637167485443652097082383414421609104844664086293893735328145428073983700661076644499830338687934979014243890260397076290947375846746290496062829086226390738139585890233056453953
e = 3   # The public exponent

# The ciphertexts
c1 = 8431732094851028649566797423148404385516683650441550971867961865678302005844473058634570357271959781135170997504851762682635841261046747631360980974501309999469224672566877992121721607069190122788567667428630337210983745034392205157978079780034213248853351331543570171192741549667281639780147500208166752243516151708782197026827665220382746450161459343869780839146549414308147588061662347674718569421326327655619579361104499154294499944508375243726042451403849417024285053124056664656209802721237914992428572242096235057969317018656703375050071831705451716907799846999600797463250957398440544674812108058586252467066
c2 = 6070836237283817856056699473340499847255205363106632538907077807997524605057873745766384939275807290209645481460530842119149012152890269913858251001601410184172748811601404933034943179303974943368966331356722224095093297226236658514143688113259336955839796646981488266316746577065286537504891676457707712002975793792713021321140025914956684746719010906089072479738309985923034079904086391773260068820362774293086516460159537741007379524694167035999398843582769891081321782422733126243202939956744157130755794555755174318609713011381807069346571766015463098143083596844234382333079964682569881784893536543848215382252
c3 = 3352541195843049037511231941890081267301669054677731787677676656522106181071913678313527881193680391818600236674586525939066426275615797151766297002527801621929210373828879788470994490723415061061385007822664259424462444179860891924829358925104919658986264860036259754439393301302945192075192993922506746181217255346985537622342175168915474656164077928981865847937464545067253284123100858982507941665937208724591605679282312330105398414577532874730082299716825854966691522025303031171180721009960177533564453846277182977129049415351030723467741194658391635423816512454609992810794139342542304099073455405098068675629

# Coppersmith's method to find small roots
def find_small_root(ciphertext, modulus, exponent):
    Zn = Zmod(modulus)
    P = PolynomialRing(Zn, name='x')
    x = P.gen()
    f = x ** exponent - ciphertext
    roots = f.small_roots(X=2^20, beta=0.5)  # Adjust X and beta as needed
    return roots

# Attempt to find small roots for each ciphertext
root1 = find_small_root(c1, N, e)
root2 = find_small_root(c2, N, e)
root3 = find_small_root(c3, N, e)

# Display the results
print("Root for c1:", root1)
print("Root for c2:", root2)
print("Root for c3:", root3)
