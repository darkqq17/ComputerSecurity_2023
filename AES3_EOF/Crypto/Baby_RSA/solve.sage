from sage.all import *

# Given values
N = 13718967163979280277796015019330274316983819495750029273914555893142676396235416870598734153645979499023440210796576362655982223648467109073423975723138460477999467250362215714157976561434982050761337503035180380418617850842810051466183241906939848293518349271448012344382073163396956318430220358680795600386120884610998764433712468673262881754323600786264668114319054320385890927722284410326490418436236197092983183016962836368839122249548488202645786993725171375328037801244772503093378583274455933299563736805627023244771902686209517142783171481320496616824161422605187603293637615866661472551103352691492004247741
e = 3   # The public exponent

# The ciphertexts
c1 = 14826726455764136796955139597154918003808821063358573623405244695787687906712080682564801010119532487931039670966856878602522913327769898478900889445071166666432039499529008131984071868053122060990352324415131158328405141690707924736302918417074419445850269180861853845094659875825546938662304884373390405691108415968219167887325577101842974056928548553343431166306395241636732922584208864488655276028106770756879665843129334794409626193248348445505335915716092996782854914446374834349481401570506776498521231002324629814380842901941718927702202316773414008252912338572019031668514295986327785176255744199979529435700
c2 = 120070514566112434412433439019892512454738608962527385903011155285171782116452810796097299384070155425773936031572102202908694097109982635968176364339046991731079589543374110838508864227371647144084570001574809939744351716867832986293214126807360663869446589421343844710132595011054346067144895774334666463999787765460495686256883200001312508058652078718724548450898451192845252544188189956601344881410304540057952542492283202157971131374353383813900619208318351005829174532501470175572794832536058696633917747558528642250672834661005719159443430653094713386317432057069927355168934369701865969246441794436279000634
c3 = 9894109391543652965913665198848026905921183703534737470942754225413131343722362553143124323423365737113506178558919539451849700943517001131746095966522859565004180500084976190233206667549712129703888033882571907100522275148088422511628729984305032251565400811286173657510187113035649587779835146632017251911600311704538066790603697814050695921435930869007602657437744092829521882349195180143530834641878633465982350426156574144841629677276595000157685494009901498112573825797003045669404278088280309097806206679201136256877957867438557004203925065400027602249341636068529829427154795490836556429227482162917943085267
# Coppersmith's method to find small roots
def find_small_root(ciphertext, modulus, exponent):
    P.<x> = PolynomialRing(Zmod(modulus))
    f = x^exponent - ciphertext
    roots = f.small_roots(X=2^617, beta=0.5)
    return roots

# Attempt to find small roots for each ciphertext
root1 = find_small_root(c1, N, e)
root2 = find_small_root(c2, N, e)
root3 = find_small_root(c3, N, e)

# Display the results
print("Root for c1:", root1)
print("Root for c2:", root2)
print("Root for c3:", root3)