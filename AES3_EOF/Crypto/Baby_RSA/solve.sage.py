

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_18693764369712092061910805595050739494600252339504032365764557849501848052929555061479870082408622501909905676444412379307928910383932025193252041386466058524209769459378447980018619077136635699525753960055745765784232800397005598103485164178935836440701723214470518409258786118587320166938105898224207386465247342279508465811908946374011588573514633097620579549844676379912311812832433003834885912009307029861366971487603037312040877006699637167485443652097082383414421609104844664086293893735328145428073983700661076644499830338687934979014243890260397076290947375846746290496062829086226390738139585890233056453953 = Integer(18693764369712092061910805595050739494600252339504032365764557849501848052929555061479870082408622501909905676444412379307928910383932025193252041386466058524209769459378447980018619077136635699525753960055745765784232800397005598103485164178935836440701723214470518409258786118587320166938105898224207386465247342279508465811908946374011588573514633097620579549844676379912311812832433003834885912009307029861366971487603037312040877006699637167485443652097082383414421609104844664086293893735328145428073983700661076644499830338687934979014243890260397076290947375846746290496062829086226390738139585890233056453953); _sage_const_3 = Integer(3); _sage_const_14826726455764136796955139597154918003808821063358573623405244695787687906712080682564801010119532487931039670966856878602522913327769898478900889445071166666432039499529008131984071868053122060990352324415131158328405141690707924736302918417074419445850269180861853845094659875825546938662304884373390405691108415968219167887325577101842974056928548553343431166306395241636732922584208864488655276028106770756879665843129334794409626193248348445505335915716092996782854914446374834349481401570506776498521231002324629814380842901941718927702202316773414008252912338572019031668514295986327785176255744199979529435700 = Integer(14826726455764136796955139597154918003808821063358573623405244695787687906712080682564801010119532487931039670966856878602522913327769898478900889445071166666432039499529008131984071868053122060990352324415131158328405141690707924736302918417074419445850269180861853845094659875825546938662304884373390405691108415968219167887325577101842974056928548553343431166306395241636732922584208864488655276028106770756879665843129334794409626193248348445505335915716092996782854914446374834349481401570506776498521231002324629814380842901941718927702202316773414008252912338572019031668514295986327785176255744199979529435700); _sage_const_120070514566112434412433439019892512454738608962527385903011155285171782116452810796097299384070155425773936031572102202908694097109982635968176364339046991731079589543374110838508864227371647144084570001574809939744351716867832986293214126807360663869446589421343844710132595011054346067144895774334666463999787765460495686256883200001312508058652078718724548450898451192845252544188189956601344881410304540057952542492283202157971131374353383813900619208318351005829174532501470175572794832536058696633917747558528642250672834661005719159443430653094713386317432057069927355168934369701865969246441794436279000634 = Integer(120070514566112434412433439019892512454738608962527385903011155285171782116452810796097299384070155425773936031572102202908694097109982635968176364339046991731079589543374110838508864227371647144084570001574809939744351716867832986293214126807360663869446589421343844710132595011054346067144895774334666463999787765460495686256883200001312508058652078718724548450898451192845252544188189956601344881410304540057952542492283202157971131374353383813900619208318351005829174532501470175572794832536058696633917747558528642250672834661005719159443430653094713386317432057069927355168934369701865969246441794436279000634); _sage_const_9894109391543652965913665198848026905921183703534737470942754225413131343722362553143124323423365737113506178558919539451849700943517001131746095966522859565004180500084976190233206667549712129703888033882571907100522275148088422511628729984305032251565400811286173657510187113035649587779835146632017251911600311704538066790603697814050695921435930869007602657437744092829521882349195180143530834641878633465982350426156574144841629677276595000157685494009901498112573825797003045669404278088280309097806206679201136256877957867438557004203925065400027602249341636068529829427154795490836556429227482162917943085267 = Integer(9894109391543652965913665198848026905921183703534737470942754225413131343722362553143124323423365737113506178558919539451849700943517001131746095966522859565004180500084976190233206667549712129703888033882571907100522275148088422511628729984305032251565400811286173657510187113035649587779835146632017251911600311704538066790603697814050695921435930869007602657437744092829521882349195180143530834641878633465982350426156574144841629677276595000157685494009901498112573825797003045669404278088280309097806206679201136256877957867438557004203925065400027602249341636068529829427154795490836556429227482162917943085267); _sage_const_2 = Integer(2); _sage_const_617 = Integer(617); _sage_const_0p5 = RealNumber('0.5')
from sage.all import *

# Given values
N = _sage_const_18693764369712092061910805595050739494600252339504032365764557849501848052929555061479870082408622501909905676444412379307928910383932025193252041386466058524209769459378447980018619077136635699525753960055745765784232800397005598103485164178935836440701723214470518409258786118587320166938105898224207386465247342279508465811908946374011588573514633097620579549844676379912311812832433003834885912009307029861366971487603037312040877006699637167485443652097082383414421609104844664086293893735328145428073983700661076644499830338687934979014243890260397076290947375846746290496062829086226390738139585890233056453953 
e = _sage_const_3    # The public exponent

# The ciphertexts
c1 = _sage_const_14826726455764136796955139597154918003808821063358573623405244695787687906712080682564801010119532487931039670966856878602522913327769898478900889445071166666432039499529008131984071868053122060990352324415131158328405141690707924736302918417074419445850269180861853845094659875825546938662304884373390405691108415968219167887325577101842974056928548553343431166306395241636732922584208864488655276028106770756879665843129334794409626193248348445505335915716092996782854914446374834349481401570506776498521231002324629814380842901941718927702202316773414008252912338572019031668514295986327785176255744199979529435700 
c2 = _sage_const_120070514566112434412433439019892512454738608962527385903011155285171782116452810796097299384070155425773936031572102202908694097109982635968176364339046991731079589543374110838508864227371647144084570001574809939744351716867832986293214126807360663869446589421343844710132595011054346067144895774334666463999787765460495686256883200001312508058652078718724548450898451192845252544188189956601344881410304540057952542492283202157971131374353383813900619208318351005829174532501470175572794832536058696633917747558528642250672834661005719159443430653094713386317432057069927355168934369701865969246441794436279000634 
c3 = _sage_const_9894109391543652965913665198848026905921183703534737470942754225413131343722362553143124323423365737113506178558919539451849700943517001131746095966522859565004180500084976190233206667549712129703888033882571907100522275148088422511628729984305032251565400811286173657510187113035649587779835146632017251911600311704538066790603697814050695921435930869007602657437744092829521882349195180143530834641878633465982350426156574144841629677276595000157685494009901498112573825797003045669404278088280309097806206679201136256877957867438557004203925065400027602249341636068529829427154795490836556429227482162917943085267 
# Coppersmith's method to find small roots
def find_small_root(ciphertext, modulus, exponent):
    P = PolynomialRing(Zmod(modulus), names=('x',)); (x,) = P._first_ngens(1)
    f = x**exponent - ciphertext
    roots = f.small_roots(X=_sage_const_2 **_sage_const_617 , beta=_sage_const_0p5 )
    return roots

# Attempt to find small roots for each ciphertext
root1 = find_small_root(c1, N, e)
root2 = find_small_root(c2, N, e)
root3 = find_small_root(c3, N, e)

# Display the results
print("Root for c1:", root1)
print("Root for c2:", root2)
print("Root for c3:", root3)

